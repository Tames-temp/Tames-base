     public static TameInputControl[] ByStringTwoMonos(string S)
        {
            string s = S.ToLower();
            TameInputControl pair = ByStringDuo(s);
            if (pair != null)
            {
                TameInputControl[] r = new TameInputControl[2];
                switch (pair.control)
                {
                    case InputTypes.KeyboardMouse:
                        if (pair.hold == InputHoldType.Button)
                            return null;
                        else
                        {
                            r[0] = new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Key, keyValue = new int[] { pair.keyValue[0] }, aux = pair.aux };
                            r[1] = new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Key, keyValue = new int[] { pair.keyValue[1] }, aux = pair.aux };
                            return r;
                        }
                    case InputTypes.GamePad:
                        r[0] = new TameInputControl() { control = InputTypes.GamePad, aux = pair.aux };
                        r[1] = new TameInputControl() { control = InputTypes.GamePad, aux = pair.aux };
                        switch (pair.hold)
                        {
                            case InputHoldType.GYA: r[0].hold = InputHoldType.GY; r[1].hold = InputHoldType.GA; break;
                            case InputHoldType.GXB: r[0].hold = InputHoldType.GX; r[1].hold = InputHoldType.GB; break;
                            case InputHoldType.GS: r[0].hold = InputHoldType.GSL; r[1].hold = InputHoldType.GSR; break;
                            case InputHoldType.GDX: r[0].hold = InputHoldType.GDXL; r[1].hold = InputHoldType.GDXR; break;
                            case InputHoldType.GDY: r[0].hold = InputHoldType.GDYD; r[1].hold = InputHoldType.GDYU; break;
                            default: return null;
                        }
                        return r;
                }
            }
            return null;
        }
        public static TameInputControl ByStringMono(string S)
        {
            int k;
            string s = S.ToLower();
            string[] plus = s.Split('+');
            InputControlHold holder = InputControlHold.Shift;
            InputTypes it = InputTypes.None;
            if (plus.Length == 2) holder = GetHolder(plus[0], out it);
            s = plus.Length == 2 ? plus[1] : s;
            if (it != InputTypes.Error)
                if ((holder == InputControlHold.None) || (it == InputTypes.KeyboardMouse))
                {
                    //    if ((s == "mouse") || (s == "button")) return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Button, aux = holder };
                    k = FindKey(s);
                    if (k >= 0) return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Key, keyValue = new int[] { k }, aux = holder };

                }
            if ((holder == InputControlHold.None) || (it == InputTypes.GamePad))
            {
                switch (s)
                {
                    case "ga": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GA, aux = holder };
                    case "gb": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GB, aux = holder };
                    case "gx": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GX, aux = holder };
                    case "gy": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GY, aux = holder };
                    case "gsl": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GSL, aux = holder };
                    case "gsr": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GSR, aux = holder };
                    case "gdxl":
                    case "gdx-": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDXL, aux = holder };
                    case "gdxr":
                    case "gdx+": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDXR, aux = holder };
                    case "gdyd":
                    case "gdy-": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDYD, aux = holder };
                    case "gdyu":
                    case "gdy+": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDYU, aux = holder };
                }
            }

            return null;
        }

        public static TameInputControl ByStringDuo(string S)
        {
            int a = -1, b = -1;
            string s = S.ToLower();
            string[] comma = s.Split(',');
            string[] plus = comma.Length == 1 ? s.Split('+') : comma[0].Split('+');
            InputControlHold holder = InputControlHold.None;
            InputTypes it = InputTypes.None;
            if (plus.Length == 2) holder = GetHolder(plus[0], out it);
            s = plus.Length == 2 ? plus[1] : comma[0];
            if ((holder == InputControlHold.None) || (it == InputTypes.KeyboardMouse))
            {
                if (comma.Length == 2)
                {
                    //    if ((s == "mouse") || (s == "button")) return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Button, aux = holder };
                    a = FindKey(s);
                    b = FindKey(comma[1]);
                    if (a >= 0 && b >= 0)
                        return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Key, keyValue = new int[] { a, b }, aux = holder };
                }
                else
                {
                    if (s.StartsWith("vert")) { a = FindKey("down"); b = FindKey("up"); }
                    if (s.StartsWith("hor")) { a = FindKey("left"); b = FindKey("right"); }
                    if (a >= 0 && b >= 0)
                        return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Key, keyValue = new int[] { a, b }, aux = holder };
                    if ((s == "mouse") || (s == "button"))
                        return new TameInputControl() { control = InputTypes.KeyboardMouse, hold = InputHoldType.Button, aux = holder };
                }
            }
            if ((holder == InputControlHold.None) || (it == InputTypes.GamePad))
            {
                switch (s)
                {
                    case "gya": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GYA, aux = holder };
                    case "gxb": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GXB, aux = holder };
                    case "gs": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GS, aux = holder };
                    case "gdx": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDX, aux = holder };
                    case "gdy": return new TameInputControl() { control = InputTypes.GamePad, hold = InputHoldType.GDY, aux = holder };
                }
            }

            return null;
        }